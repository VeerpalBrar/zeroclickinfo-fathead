componentWillAppear()	A										<section class="prog__container"><p>This is called at the same time as <code>componentDidMount()</code> for components that are initially mounted in a <code>TransitionGroup</code>. It will block other animations from occurring until <code>callback</code> is called. It is only called on the initial render of a <code>TransitionGroup</code>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">componentWillAppear</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/animation.html#componentwillappear
componentDidAppear()	A										<section class="prog__container"><p>This is called after the <code>callback</code> function that was passed to <code>componentWillAppear</code> is called.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">componentDidAppear</span><span class="p">()</span>
</code></pre></section>	https://facebook.github.io/react/docs/animation.html#componentdidappear
componentWillEnter()	A										<section class="prog__container"><p>This is called at the same time as <code>componentDidMount()</code> for components added to an existing <code>TransitionGroup</code>. It will block other animations from occurring until <code>callback</code> is called. It will not be called on the initial render of a <code>TransitionGroup</code>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">componentWillEnter</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/animation.html#componentwillenter
componentDidEnter()	A										<section class="prog__container"><p>This is called after the <code>callback</code> function that was passed to <a href="#componentwillenter"><code>componentWillEnter()</code></a> is called.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">componentDidEnter</span><span class="p">()</span>
</code></pre></section>	https://facebook.github.io/react/docs/animation.html#componentdidenter
componentWillLeave()	A										<section class="prog__container"><p>This is called when the child has been removed from the <code>ReactTransitionGroup</code>. Though the child has been removed, <code>ReactTransitionGroup</code> will keep it in the DOM until <code>callback</code> is called.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">componentWillLeave</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/animation.html#componentwillleave
componentDidLeave()	A										<section class="prog__container"><p>This is called when the <code>willLeave</code> <code>callback</code> is called (at the same time as <code>componentWillUnmount()</code>).</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">componentDidLeave</span><span class="p">()</span>
</code></pre></section>	https://facebook.github.io/react/docs/animation.html#componentdidleave
Clipboard Events	A										<section class="prog__container"><p>Event names:</p>

<p>Properties:</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">DOMDataTransfer</span> <span class="nx">clipboardData</span>
</code></pre></section>	https://facebook.github.io/react/docs/events.html#clipboard-events
Composition Events	A										<section class="prog__container"><p>Event names:</p>

<p>Properties:</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">string</span> <span class="nx">data</span>
</code></pre></section>	https://facebook.github.io/react/docs/events.html#composition-events
Keyboard Events	A										<section class="prog__container"><p>Event names:</p>

<p>Properties:</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="kr">boolean</span> <span class="nx">altKey</span>
<span class="nx">number</span> <span class="nx">charCode</span>
<span class="kr">boolean</span> <span class="nx">ctrlKey</span>
<span class="kr">boolean</span> <span class="nx">getModifierState</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
<span class="nx">string</span> <span class="nx">key</span>
<span class="nx">number</span> <span class="nx">keyCode</span>
<span class="nx">string</span> <span class="nx">locale</span>
<span class="nx">number</span> <span class="nx">location</span>
<span class="kr">boolean</span> <span class="nx">metaKey</span>
<span class="kr">boolean</span> <span class="nx">repeat</span>
<span class="kr">boolean</span> <span class="nx">shiftKey</span>
<span class="nx">number</span> <span class="nx">which</span>
</code></pre></section>	https://facebook.github.io/react/docs/events.html#keyboard-events
Focus Events	A										<section class="prog__container"><p>Event names:</p>

<p>These focus events work on all elements in the React DOM, not just form elements.</p>
<p>Properties:</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">DOMEventTarget</span> <span class="nx">relatedTarget</span>
</code></pre></section>	https://facebook.github.io/react/docs/events.html#focus-events
Form Events	A										<section class="prog__container"><p>Event names:</p>

<p>For more information about the onChange event, see <a href="/react/docs/forms.html">Forms</a>.</p><br><pre><code class="language-text" data-lang="text">onChange onInput onSubmit
</code></pre></section>	https://facebook.github.io/react/docs/events.html#form-events
Mouse Events	A										<section class="prog__container"><p>Event names:</p>

<p>The <code>onMouseEnter</code> and <code>onMouseLeave</code> events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.</p>
<p>Properties:</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="kr">boolean</span> <span class="nx">altKey</span>
<span class="nx">number</span> <span class="nx">button</span>
<span class="nx">number</span> <span class="nx">buttons</span>
<span class="nx">number</span> <span class="nx">clientX</span>
<span class="nx">number</span> <span class="nx">clientY</span>
<span class="kr">boolean</span> <span class="nx">ctrlKey</span>
<span class="kr">boolean</span> <span class="nx">getModifierState</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
<span class="kr">boolean</span> <span class="nx">metaKey</span>
<span class="nx">number</span> <span class="nx">pageX</span>
<span class="nx">number</span> <span class="nx">pageY</span>
<span class="nx">DOMEventTarget</span> <span class="nx">relatedTarget</span>
<span class="nx">number</span> <span class="nx">screenX</span>
<span class="nx">number</span> <span class="nx">screenY</span>
<span class="kr">boolean</span> <span class="nx">shiftKey</span>
</code></pre></section>	https://facebook.github.io/react/docs/events.html#mouse-events
Selection Events	A										<section class="prog__container"><p>Event names:</p><br><pre><code class="language-text" data-lang="text">onSelect
</code></pre></section>	https://facebook.github.io/react/docs/events.html#selection-events
Touch Events	A										<section class="prog__container"><p>Event names:</p>

<p>Properties:</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="kr">boolean</span> <span class="nx">altKey</span>
<span class="nx">DOMTouchList</span> <span class="nx">changedTouches</span>
<span class="kr">boolean</span> <span class="nx">ctrlKey</span>
<span class="kr">boolean</span> <span class="nx">getModifierState</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
<span class="kr">boolean</span> <span class="nx">metaKey</span>
<span class="kr">boolean</span> <span class="nx">shiftKey</span>
<span class="nx">DOMTouchList</span> <span class="nx">targetTouches</span>
<span class="nx">DOMTouchList</span> <span class="nx">touches</span>
</code></pre></section>	https://facebook.github.io/react/docs/events.html#touch-events
UI Events	A										<section class="prog__container"><p>Event names:</p>

<p>Properties:</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">number</span> <span class="nx">detail</span>
<span class="nx">DOMAbstractView</span> <span class="nx">view</span>
</code></pre></section>	https://facebook.github.io/react/docs/events.html#ui-events
Wheel Events	A										<section class="prog__container"><p>Event names:</p>

<p>Properties:</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">number</span> <span class="nx">deltaMode</span>
<span class="nx">number</span> <span class="nx">deltaX</span>
<span class="nx">number</span> <span class="nx">deltaY</span>
<span class="nx">number</span> <span class="nx">deltaZ</span>
</code></pre></section>	https://facebook.github.io/react/docs/events.html#wheel-events
Media Events	A										<section class="prog__container"><p>Event names:</p><br><pre><code class="language-text" data-lang="text">onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted 
onEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay 
onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend 
onTimeUpdate onVolumeChange onWaiting
</code></pre></section>	https://facebook.github.io/react/docs/events.html#media-events
Image Events	A										<section class="prog__container"><p>Event names:</p><br><pre><code class="language-text" data-lang="text">onLoad onError
</code></pre></section>	https://facebook.github.io/react/docs/events.html#image-events
Animation Events	A										<section class="prog__container"><p>Event names:</p>

<p>Properties:</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">string</span> <span class="nx">animationName</span>
<span class="nx">string</span> <span class="nx">pseudoElement</span>
<span class="kr">float</span> <span class="nx">elapsedTime</span>
</code></pre></section>	https://facebook.github.io/react/docs/events.html#animation-events
Transition Events	A										<section class="prog__container"><p>Event names:</p>

<p>Properties:</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">string</span> <span class="nx">propertyName</span>
<span class="nx">string</span> <span class="nx">pseudoElement</span>
<span class="kr">float</span> <span class="nx">elapsedTime</span>
</code></pre></section>	https://facebook.github.io/react/docs/events.html#transition-events
start()	A										<section class="prog__container"><h3><a class="anchor" name="stop"></a><code>stop()</code> <a class="hash-link" href="#stop">#</a></h3>
<p>Start/stop the measurement. The React operations in-between are recorded for analyses below. Operations that took an insignificant amount of time are ignored.</p>
<p>After stopping, you will need <a href="#getlastmeasurements"><code>Perf.getLastMeasurements()</code></a> to get the measurements.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Perf</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span>
<span class="c1">// ...</span>
<span class="nx">Perf</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>
</code></pre></section>	https://facebook.github.io/react/docs/perf.html#start
stop()	A										<section class="prog__container"><p>Start/stop the measurement. The React operations in-between are recorded for analyses below. Operations that took an insignificant amount of time are ignored.</p>
<p>After stopping, you will need <a href="#getlastmeasurements"><code>Perf.getLastMeasurements()</code></a> to get the measurements.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Perf</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span>
<span class="c1">// ...</span>
<span class="nx">Perf</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>
</code></pre></section>	https://facebook.github.io/react/docs/perf.html#stop
getLastMeasurements()	A										<section class="prog__container"><p>Get the opaque data structure describing measurements from the last start-stop session. You can save it and pass it to the other print methods in <a href="#printing-results"><code>Perf</code></a> to analyze past measurements.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Perf</span><span class="p">.</span><span class="nx">getLastMeasurements</span><span class="p">()</span>
</code></pre></section>	https://facebook.github.io/react/docs/perf.html#getlastmeasurements
printInclusive()	A										<section class="prog__container"><p>Prints the overall time taken. If no argument's passed, defaults to all the measurements from the last recording. This prints a nicely formatted table in the console, like so:</p>
<p><img alt="" src="/react/img/docs/perf-inclusive.png"/></p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Perf</span><span class="p">.</span><span class="nx">printInclusive</span><span class="p">(</span><span class="nx">measurements</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/perf.html#printinclusive
printExclusive()	A										<section class="prog__container"><p>"Exclusive" times don't include the times taken to mount the components: processing props, calling <code>componentWillMount</code> and <code>componentDidMount</code>, etc.</p>
<p><img alt="" src="/react/img/docs/perf-exclusive.png"/></p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Perf</span><span class="p">.</span><span class="nx">printExclusive</span><span class="p">(</span><span class="nx">measurements</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/perf.html#printexclusive
printWasted()	A										<section class="prog__container"><p><strong>The most useful part of the profiler</strong>.</p>
<p>"Wasted" time is spent on components that didn't actually render anything, e.g. the render stayed the same, so the DOM wasn't touched.</p>
<p><img alt="" src="/react/img/docs/perf-wasted.png"/></p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Perf</span><span class="p">.</span><span class="nx">printWasted</span><span class="p">(</span><span class="nx">measurements</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/perf.html#printwasted
printOperations()	A										<section class="prog__container"><p>Prints the underlying DOM manipulations, e.g. "set innerHTML" and "remove".</p>
<p><img alt="" src="/react/img/docs/perf-dom.png"/></p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Perf</span><span class="p">.</span><span class="nx">printOperations</span><span class="p">(</span><span class="nx">measurements</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/perf.html#printoperations
printDOM()	A										<section class="prog__container"><p>This method has been renamed to <a href="#printoperations"><code>printOperations()</code></a>. Currently <code>printDOM()</code> still exists as an alias but it prints a deprecation warning and will eventually be removed.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Perf</span><span class="p">.</span><span class="nx">printDOM</span><span class="p">(</span><span class="nx">measurements</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/perf.html#printdom
React.Component	A										<section class="prog__container"><p><code>React.Component</code> is the base class for React components when they are defined using <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes">ES6 classes</a>.</p>

<p>See the <a href="/react/docs/react-component.html">React.Component API Reference</a> for a list of methods and properties related to the base <code>React.Component</code> class.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="kr">class</span> <span class="nx">Greeting</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.component
React.PureComponent	A										<section class="prog__container"><p><code>React.Component</code> is the base class for React components when they are defined using <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes">ES6 classes</a>.</p>

<p>See the <a href="/react/docs/react-component.html">React.Component API Reference</a> for a list of methods and properties related to the base <code>React.Component</code> class.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="kr">class</span> <span class="nx">Greeting</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.purecomponent
createClass()	A										<section class="prog__container"><p>If you don't use ES6 yet, you may use the <code>React.createClass()</code> helper instead to create a component class.</p>

<p>See <a href="/react/docs/react-without-es6.html">Using React without ES6</a> for more information.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">Greeting</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;;</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#createclass
createElement()	A										<section class="prog__container"><p>Create and return a new React element of the given type. The type argument can be either an
html tag name string (eg. 'div', 'span', etc), or a React class (created via <code>React.createClass()</code>).</p>
<p>Code written with JSX will be converted to use <code>React.createElement()</code>. You will not typically invoke <code>React.createElement()</code> directly if you are using JSX. See <a href="/react/docs/react-without-jsx.html">React Without JSX</a> to learn more.</p>
<p>Convenience wrappers around <code>React.createElement()</code> for DOM components are provided by <code>React.DOM</code>. For example, <code>React.DOM.a(...)</code> is a convenience wrapper for <code>React.createElement('a', ...)</code>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span>
  <span class="nx">type</span><span class="p">,</span>
  <span class="p">[</span><span class="nx">props</span><span class="p">],</span>
  <span class="p">[...</span><span class="nx">children</span><span class="p">]</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#createelement
cloneElement()	A										<section class="prog__container"><p>Clone and return a new React element using <code>element</code> as the starting point. The resulting element will have the original element's props with the new props merged in shallowly. New children will replace existing children. <code>key</code> and <code>ref</code> from the original element will be preserved.</p>
<p><code>React.cloneElement()</code> is almost equivalent to:</p>

<p>However, it also preserves <code>ref</code>s. This means that if you get a child with a <code>ref</code> on it, you won't accidentally steal it from your ancestor. You will get the same <code>ref</code> attached to your new element.</p>
<p>This API was introduced as a replacement of the deprecated <code>React.addons.cloneWithProps()</code>.</p><br><pre><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">element</span><span class="p">.</span><span class="nx">type</span> <span class="p">{...</span><span class="nx">element</span><span class="p">.</span><span class="nx">props</span><span class="p">}</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/element.type&gt;</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#cloneelement
createFactory()	A										<section class="prog__container"><p>Return a function that produces React elements of a given type. Like <a href="#createElement"><code>React.createElement()</code></a>, the type argument can be either an html tag name string (eg. 'div', 'span', etc), or a React class.</p>
<p>You will not typically invoke <code>React.createFactory()</code> directly if you are using JSX. See <a href="/react/docs/react-without-jsx.html">React Without JSX</a> to learn more.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">React</span><span class="p">.</span><span class="nx">createFactory</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#createfactory
isValidElement()	A										<section class="prog__container"><p>Verifies the object is a React element. Returns <code>true</code> or <code>false</code>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">React</span><span class="p">.</span><span class="nx">isValidElement</span><span class="p">(</span><span class="nx">object</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#isvalidelement
React.Children	A										<section class="prog__container"><p><code>React.Children</code> provides utilities for dealing with the <code>this.props.children</code> opaque data structure.</p>
<h4><a class="anchor" name="react.children.map"></a><code>React.Children.map</code> <a class="hash-link" href="#react.children.map">#</a></h4>
<p>Invokes a function on every immediate child contained within <code>children</code> with <code>this</code> set to <code>thisArg</code>. If <code>children</code> is a keyed fragment or array it will be traversed: the function will never be passed the container objects. If children is <code>null</code> or <code>undefined</code>, returns <code>null</code> or <code>undefined</code> rather than an array.</p>
<h4><a class="anchor" name="react.children.foreach"></a><code>React.Children.forEach</code> <a class="hash-link" href="#react.children.foreach">#</a></h4>
<p>Like <a href="#react.children.map"><code>React.Children.map()</code></a> but does not return an array.</p>
<h4><a class="anchor" name="react.children.count"></a><code>React.Children.count</code> <a class="hash-link" href="#react.children.count">#</a></h4>
<p>Returns the total number of components in <code>children</code>, equal to the number of times that a callback passed to <code>map</code> or <code>forEach</code> would be invoked.</p>
<h4><a class="anchor" name="react.children.only"></a><code>React.Children.only</code> <a class="hash-link" href="#react.children.only">#</a></h4>
<p>Returns the only child in <code>children</code>. Throws otherwise.</p>
<h4><a class="anchor" name="react.children.toarray"></a><code>React.Children.toArray</code> <a class="hash-link" href="#react.children.toarray">#</a></h4>
<p>Returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>this.props.children</code> before passing it down.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">React</span><span class="p">.</span><span class="nx">Children</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">children</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.children
React.Children.map	A										<section class="prog__container"><p>Invokes a function on every immediate child contained within <code>children</code> with <code>this</code> set to <code>thisArg</code>. If <code>children</code> is a keyed fragment or array it will be traversed: the function will never be passed the container objects. If children is <code>null</code> or <code>undefined</code>, returns <code>null</code> or <code>undefined</code> rather than an array.</p>
<h4><a class="anchor" name="react.children.foreach"></a><code>React.Children.forEach</code> <a class="hash-link" href="#react.children.foreach">#</a></h4>
<p>Like <a href="#react.children.map"><code>React.Children.map()</code></a> but does not return an array.</p>
<h4><a class="anchor" name="react.children.count"></a><code>React.Children.count</code> <a class="hash-link" href="#react.children.count">#</a></h4>
<p>Returns the total number of components in <code>children</code>, equal to the number of times that a callback passed to <code>map</code> or <code>forEach</code> would be invoked.</p>
<h4><a class="anchor" name="react.children.only"></a><code>React.Children.only</code> <a class="hash-link" href="#react.children.only">#</a></h4>
<p>Returns the only child in <code>children</code>. Throws otherwise.</p>
<h4><a class="anchor" name="react.children.toarray"></a><code>React.Children.toArray</code> <a class="hash-link" href="#react.children.toarray">#</a></h4>
<p>Returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>this.props.children</code> before passing it down.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">React</span><span class="p">.</span><span class="nx">Children</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">children</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.children.map
React.Children.forEach	A										<section class="prog__container"><p>Like <a href="#react.children.map"><code>React.Children.map()</code></a> but does not return an array.</p>
<h4><a class="anchor" name="react.children.count"></a><code>React.Children.count</code> <a class="hash-link" href="#react.children.count">#</a></h4>
<p>Returns the total number of components in <code>children</code>, equal to the number of times that a callback passed to <code>map</code> or <code>forEach</code> would be invoked.</p>
<h4><a class="anchor" name="react.children.only"></a><code>React.Children.only</code> <a class="hash-link" href="#react.children.only">#</a></h4>
<p>Returns the only child in <code>children</code>. Throws otherwise.</p>
<h4><a class="anchor" name="react.children.toarray"></a><code>React.Children.toArray</code> <a class="hash-link" href="#react.children.toarray">#</a></h4>
<p>Returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>this.props.children</code> before passing it down.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">React</span><span class="p">.</span><span class="nx">Children</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">children</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.children.foreach
React.Children.count	A										<section class="prog__container"><p>Returns the total number of components in <code>children</code>, equal to the number of times that a callback passed to <code>map</code> or <code>forEach</code> would be invoked.</p>
<h4><a class="anchor" name="react.children.only"></a><code>React.Children.only</code> <a class="hash-link" href="#react.children.only">#</a></h4>
<p>Returns the only child in <code>children</code>. Throws otherwise.</p>
<h4><a class="anchor" name="react.children.toarray"></a><code>React.Children.toArray</code> <a class="hash-link" href="#react.children.toarray">#</a></h4>
<p>Returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>this.props.children</code> before passing it down.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">React</span><span class="p">.</span><span class="nx">Children</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">children</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.children.count
React.Children.only	A										<section class="prog__container"><p>Returns the only child in <code>children</code>. Throws otherwise.</p>
<h4><a class="anchor" name="react.children.toarray"></a><code>React.Children.toArray</code> <a class="hash-link" href="#react.children.toarray">#</a></h4>
<p>Returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>this.props.children</code> before passing it down.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">React</span><span class="p">.</span><span class="nx">Children</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">children</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.children.only
React.Children.toArray	A										<section class="prog__container"><p>Returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>this.props.children</code> before passing it down.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">React</span><span class="p">.</span><span class="nx">Children</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span><span class="nx">children</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.children.toarray
React.PropTypes	A										<section class="prog__container"><p><code>React.PropTypes</code> exports a range of validators that can be used with a component's <code>propTypes</code> object to validate props being passed to your components.</p>
<p>For more information about <code>PropTypes</code>, see <a href="/react/docs/typechecking-with-proptypes.html">Typechecking with PropTypes</a>.</p>
<h4><a class="anchor" name="react.proptypes.array"></a><code>React.PropTypes.array</code> <a class="hash-link" href="#react.proptypes.array">#</a></h4>
<p>Validates that a prop is a JavaScript array primitive.</p>
<h4><a class="anchor" name="react.proptypes.bool"></a><code>React.PropTypes.bool</code> <a class="hash-link" href="#react.proptypes.bool">#</a></h4>
<p>Validates that a prop is a JavaScript bool primitive.</p>
<h4><a class="anchor" name="react.proptypes.func"></a><code>React.PropTypes.func</code> <a class="hash-link" href="#react.proptypes.func">#</a></h4>
<p>Validates that a prop is a JavaScript function.</p>
<h4><a class="anchor" name="react.proptypes.number"></a><code>React.PropTypes.number</code> <a class="hash-link" href="#react.proptypes.number">#</a></h4>
<p>Validates that a prop is a JavaScript number primitive.</p>
<h4><a class="anchor" name="react.proptypes.object"></a><code>React.PropTypes.object</code> <a class="hash-link" href="#react.proptypes.object">#</a></h4>
<p>Validates that a prop is a JavaScript object.</p>
<h4><a class="anchor" name="react.proptypes.string"></a><code>React.PropTypes.string</code> <a class="hash-link" href="#react.proptypes.string">#</a></h4>
<p>Validates that a prop is a JavaScript string primitive.</p>
<h4><a class="anchor" name="react.proptypes.symbol"></a><code>React.PropTypes.symbol</code> <a class="hash-link" href="#react.proptypes.symbol">#</a></h4>
<p>Validates that a prop is a JavaScript symbol.</p>
<h4><a class="anchor" name="react.proptypes.node"></a><code>React.PropTypes.node</code> <a class="hash-link" href="#react.proptypes.node">#</a></h4>
<p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p>
<h4><a class="anchor" name="react.proptypes.element"></a><code>React.PropTypes.element</code> <a class="hash-link" href="#react.proptypes.element">#</a></h4>
<p>Validates that a prop is a React element.</p>
<h4><a class="anchor" name="react.proptypes.instanceof"></a><code>React.PropTypes.instanceOf()</code> <a class="hash-link" href="#react.proptypes.instanceof">#</a></h4>
<p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p>
<h4><a class="anchor" name="react.proptypes.oneof"></a><code>React.PropTypes.oneOf()</code> <a class="hash-link" href="#react.proptypes.oneof">#</a></h4>
<p>Validates that a prop is limited to specific values by treating it as an enum.</p>
<h4><a class="anchor" name="react.proptypes.oneoftype"></a><code>React.PropTypes.oneOfType()</code> <a class="hash-link" href="#react.proptypes.oneoftype">#</a></h4>
<p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes
React.PropTypes.array	A										<section class="prog__container"><p>Validates that a prop is a JavaScript array primitive.</p>
<h4><a class="anchor" name="react.proptypes.bool"></a><code>React.PropTypes.bool</code> <a class="hash-link" href="#react.proptypes.bool">#</a></h4>
<p>Validates that a prop is a JavaScript bool primitive.</p>
<h4><a class="anchor" name="react.proptypes.func"></a><code>React.PropTypes.func</code> <a class="hash-link" href="#react.proptypes.func">#</a></h4>
<p>Validates that a prop is a JavaScript function.</p>
<h4><a class="anchor" name="react.proptypes.number"></a><code>React.PropTypes.number</code> <a class="hash-link" href="#react.proptypes.number">#</a></h4>
<p>Validates that a prop is a JavaScript number primitive.</p>
<h4><a class="anchor" name="react.proptypes.object"></a><code>React.PropTypes.object</code> <a class="hash-link" href="#react.proptypes.object">#</a></h4>
<p>Validates that a prop is a JavaScript object.</p>
<h4><a class="anchor" name="react.proptypes.string"></a><code>React.PropTypes.string</code> <a class="hash-link" href="#react.proptypes.string">#</a></h4>
<p>Validates that a prop is a JavaScript string primitive.</p>
<h4><a class="anchor" name="react.proptypes.symbol"></a><code>React.PropTypes.symbol</code> <a class="hash-link" href="#react.proptypes.symbol">#</a></h4>
<p>Validates that a prop is a JavaScript symbol.</p>
<h4><a class="anchor" name="react.proptypes.node"></a><code>React.PropTypes.node</code> <a class="hash-link" href="#react.proptypes.node">#</a></h4>
<p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p>
<h4><a class="anchor" name="react.proptypes.element"></a><code>React.PropTypes.element</code> <a class="hash-link" href="#react.proptypes.element">#</a></h4>
<p>Validates that a prop is a React element.</p>
<h4><a class="anchor" name="react.proptypes.instanceof"></a><code>React.PropTypes.instanceOf()</code> <a class="hash-link" href="#react.proptypes.instanceof">#</a></h4>
<p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p>
<h4><a class="anchor" name="react.proptypes.oneof"></a><code>React.PropTypes.oneOf()</code> <a class="hash-link" href="#react.proptypes.oneof">#</a></h4>
<p>Validates that a prop is limited to specific values by treating it as an enum.</p>
<h4><a class="anchor" name="react.proptypes.oneoftype"></a><code>React.PropTypes.oneOfType()</code> <a class="hash-link" href="#react.proptypes.oneoftype">#</a></h4>
<p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.array
React.PropTypes.bool	A										<section class="prog__container"><p>Validates that a prop is a JavaScript bool primitive.</p>
<h4><a class="anchor" name="react.proptypes.func"></a><code>React.PropTypes.func</code> <a class="hash-link" href="#react.proptypes.func">#</a></h4>
<p>Validates that a prop is a JavaScript function.</p>
<h4><a class="anchor" name="react.proptypes.number"></a><code>React.PropTypes.number</code> <a class="hash-link" href="#react.proptypes.number">#</a></h4>
<p>Validates that a prop is a JavaScript number primitive.</p>
<h4><a class="anchor" name="react.proptypes.object"></a><code>React.PropTypes.object</code> <a class="hash-link" href="#react.proptypes.object">#</a></h4>
<p>Validates that a prop is a JavaScript object.</p>
<h4><a class="anchor" name="react.proptypes.string"></a><code>React.PropTypes.string</code> <a class="hash-link" href="#react.proptypes.string">#</a></h4>
<p>Validates that a prop is a JavaScript string primitive.</p>
<h4><a class="anchor" name="react.proptypes.symbol"></a><code>React.PropTypes.symbol</code> <a class="hash-link" href="#react.proptypes.symbol">#</a></h4>
<p>Validates that a prop is a JavaScript symbol.</p>
<h4><a class="anchor" name="react.proptypes.node"></a><code>React.PropTypes.node</code> <a class="hash-link" href="#react.proptypes.node">#</a></h4>
<p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p>
<h4><a class="anchor" name="react.proptypes.element"></a><code>React.PropTypes.element</code> <a class="hash-link" href="#react.proptypes.element">#</a></h4>
<p>Validates that a prop is a React element.</p>
<h4><a class="anchor" name="react.proptypes.instanceof"></a><code>React.PropTypes.instanceOf()</code> <a class="hash-link" href="#react.proptypes.instanceof">#</a></h4>
<p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p>
<h4><a class="anchor" name="react.proptypes.oneof"></a><code>React.PropTypes.oneOf()</code> <a class="hash-link" href="#react.proptypes.oneof">#</a></h4>
<p>Validates that a prop is limited to specific values by treating it as an enum.</p>
<h4><a class="anchor" name="react.proptypes.oneoftype"></a><code>React.PropTypes.oneOfType()</code> <a class="hash-link" href="#react.proptypes.oneoftype">#</a></h4>
<p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.bool
React.PropTypes.func	A										<section class="prog__container"><p>Validates that a prop is a JavaScript function.</p>
<h4><a class="anchor" name="react.proptypes.number"></a><code>React.PropTypes.number</code> <a class="hash-link" href="#react.proptypes.number">#</a></h4>
<p>Validates that a prop is a JavaScript number primitive.</p>
<h4><a class="anchor" name="react.proptypes.object"></a><code>React.PropTypes.object</code> <a class="hash-link" href="#react.proptypes.object">#</a></h4>
<p>Validates that a prop is a JavaScript object.</p>
<h4><a class="anchor" name="react.proptypes.string"></a><code>React.PropTypes.string</code> <a class="hash-link" href="#react.proptypes.string">#</a></h4>
<p>Validates that a prop is a JavaScript string primitive.</p>
<h4><a class="anchor" name="react.proptypes.symbol"></a><code>React.PropTypes.symbol</code> <a class="hash-link" href="#react.proptypes.symbol">#</a></h4>
<p>Validates that a prop is a JavaScript symbol.</p>
<h4><a class="anchor" name="react.proptypes.node"></a><code>React.PropTypes.node</code> <a class="hash-link" href="#react.proptypes.node">#</a></h4>
<p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p>
<h4><a class="anchor" name="react.proptypes.element"></a><code>React.PropTypes.element</code> <a class="hash-link" href="#react.proptypes.element">#</a></h4>
<p>Validates that a prop is a React element.</p>
<h4><a class="anchor" name="react.proptypes.instanceof"></a><code>React.PropTypes.instanceOf()</code> <a class="hash-link" href="#react.proptypes.instanceof">#</a></h4>
<p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p>
<h4><a class="anchor" name="react.proptypes.oneof"></a><code>React.PropTypes.oneOf()</code> <a class="hash-link" href="#react.proptypes.oneof">#</a></h4>
<p>Validates that a prop is limited to specific values by treating it as an enum.</p>
<h4><a class="anchor" name="react.proptypes.oneoftype"></a><code>React.PropTypes.oneOfType()</code> <a class="hash-link" href="#react.proptypes.oneoftype">#</a></h4>
<p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.func
React.PropTypes.number	A										<section class="prog__container"><p>Validates that a prop is a JavaScript number primitive.</p>
<h4><a class="anchor" name="react.proptypes.object"></a><code>React.PropTypes.object</code> <a class="hash-link" href="#react.proptypes.object">#</a></h4>
<p>Validates that a prop is a JavaScript object.</p>
<h4><a class="anchor" name="react.proptypes.string"></a><code>React.PropTypes.string</code> <a class="hash-link" href="#react.proptypes.string">#</a></h4>
<p>Validates that a prop is a JavaScript string primitive.</p>
<h4><a class="anchor" name="react.proptypes.symbol"></a><code>React.PropTypes.symbol</code> <a class="hash-link" href="#react.proptypes.symbol">#</a></h4>
<p>Validates that a prop is a JavaScript symbol.</p>
<h4><a class="anchor" name="react.proptypes.node"></a><code>React.PropTypes.node</code> <a class="hash-link" href="#react.proptypes.node">#</a></h4>
<p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p>
<h4><a class="anchor" name="react.proptypes.element"></a><code>React.PropTypes.element</code> <a class="hash-link" href="#react.proptypes.element">#</a></h4>
<p>Validates that a prop is a React element.</p>
<h4><a class="anchor" name="react.proptypes.instanceof"></a><code>React.PropTypes.instanceOf()</code> <a class="hash-link" href="#react.proptypes.instanceof">#</a></h4>
<p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p>
<h4><a class="anchor" name="react.proptypes.oneof"></a><code>React.PropTypes.oneOf()</code> <a class="hash-link" href="#react.proptypes.oneof">#</a></h4>
<p>Validates that a prop is limited to specific values by treating it as an enum.</p>
<h4><a class="anchor" name="react.proptypes.oneoftype"></a><code>React.PropTypes.oneOfType()</code> <a class="hash-link" href="#react.proptypes.oneoftype">#</a></h4>
<p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.number
React.PropTypes.object	A										<section class="prog__container"><p>Validates that a prop is a JavaScript object.</p>
<h4><a class="anchor" name="react.proptypes.string"></a><code>React.PropTypes.string</code> <a class="hash-link" href="#react.proptypes.string">#</a></h4>
<p>Validates that a prop is a JavaScript string primitive.</p>
<h4><a class="anchor" name="react.proptypes.symbol"></a><code>React.PropTypes.symbol</code> <a class="hash-link" href="#react.proptypes.symbol">#</a></h4>
<p>Validates that a prop is a JavaScript symbol.</p>
<h4><a class="anchor" name="react.proptypes.node"></a><code>React.PropTypes.node</code> <a class="hash-link" href="#react.proptypes.node">#</a></h4>
<p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p>
<h4><a class="anchor" name="react.proptypes.element"></a><code>React.PropTypes.element</code> <a class="hash-link" href="#react.proptypes.element">#</a></h4>
<p>Validates that a prop is a React element.</p>
<h4><a class="anchor" name="react.proptypes.instanceof"></a><code>React.PropTypes.instanceOf()</code> <a class="hash-link" href="#react.proptypes.instanceof">#</a></h4>
<p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p>
<h4><a class="anchor" name="react.proptypes.oneof"></a><code>React.PropTypes.oneOf()</code> <a class="hash-link" href="#react.proptypes.oneof">#</a></h4>
<p>Validates that a prop is limited to specific values by treating it as an enum.</p>
<h4><a class="anchor" name="react.proptypes.oneoftype"></a><code>React.PropTypes.oneOfType()</code> <a class="hash-link" href="#react.proptypes.oneoftype">#</a></h4>
<p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.object
React.PropTypes.string	A										<section class="prog__container"><p>Validates that a prop is a JavaScript string primitive.</p>
<h4><a class="anchor" name="react.proptypes.symbol"></a><code>React.PropTypes.symbol</code> <a class="hash-link" href="#react.proptypes.symbol">#</a></h4>
<p>Validates that a prop is a JavaScript symbol.</p>
<h4><a class="anchor" name="react.proptypes.node"></a><code>React.PropTypes.node</code> <a class="hash-link" href="#react.proptypes.node">#</a></h4>
<p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p>
<h4><a class="anchor" name="react.proptypes.element"></a><code>React.PropTypes.element</code> <a class="hash-link" href="#react.proptypes.element">#</a></h4>
<p>Validates that a prop is a React element.</p>
<h4><a class="anchor" name="react.proptypes.instanceof"></a><code>React.PropTypes.instanceOf()</code> <a class="hash-link" href="#react.proptypes.instanceof">#</a></h4>
<p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p>
<h4><a class="anchor" name="react.proptypes.oneof"></a><code>React.PropTypes.oneOf()</code> <a class="hash-link" href="#react.proptypes.oneof">#</a></h4>
<p>Validates that a prop is limited to specific values by treating it as an enum.</p>
<h4><a class="anchor" name="react.proptypes.oneoftype"></a><code>React.PropTypes.oneOfType()</code> <a class="hash-link" href="#react.proptypes.oneoftype">#</a></h4>
<p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.string
React.PropTypes.symbol	A										<section class="prog__container"><p>Validates that a prop is a JavaScript symbol.</p>
<h4><a class="anchor" name="react.proptypes.node"></a><code>React.PropTypes.node</code> <a class="hash-link" href="#react.proptypes.node">#</a></h4>
<p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p>
<h4><a class="anchor" name="react.proptypes.element"></a><code>React.PropTypes.element</code> <a class="hash-link" href="#react.proptypes.element">#</a></h4>
<p>Validates that a prop is a React element.</p>
<h4><a class="anchor" name="react.proptypes.instanceof"></a><code>React.PropTypes.instanceOf()</code> <a class="hash-link" href="#react.proptypes.instanceof">#</a></h4>
<p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p>
<h4><a class="anchor" name="react.proptypes.oneof"></a><code>React.PropTypes.oneOf()</code> <a class="hash-link" href="#react.proptypes.oneof">#</a></h4>
<p>Validates that a prop is limited to specific values by treating it as an enum.</p>
<h4><a class="anchor" name="react.proptypes.oneoftype"></a><code>React.PropTypes.oneOfType()</code> <a class="hash-link" href="#react.proptypes.oneoftype">#</a></h4>
<p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.symbol
React.PropTypes.node	A										<section class="prog__container"><p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p>
<h4><a class="anchor" name="react.proptypes.element"></a><code>React.PropTypes.element</code> <a class="hash-link" href="#react.proptypes.element">#</a></h4>
<p>Validates that a prop is a React element.</p>
<h4><a class="anchor" name="react.proptypes.instanceof"></a><code>React.PropTypes.instanceOf()</code> <a class="hash-link" href="#react.proptypes.instanceof">#</a></h4>
<p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p>
<h4><a class="anchor" name="react.proptypes.oneof"></a><code>React.PropTypes.oneOf()</code> <a class="hash-link" href="#react.proptypes.oneof">#</a></h4>
<p>Validates that a prop is limited to specific values by treating it as an enum.</p>
<h4><a class="anchor" name="react.proptypes.oneoftype"></a><code>React.PropTypes.oneOfType()</code> <a class="hash-link" href="#react.proptypes.oneoftype">#</a></h4>
<p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.node
React.PropTypes.element	A										<section class="prog__container"><p>Validates that a prop is a React element.</p>
<h4><a class="anchor" name="react.proptypes.instanceof"></a><code>React.PropTypes.instanceOf()</code> <a class="hash-link" href="#react.proptypes.instanceof">#</a></h4>
<p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p>
<h4><a class="anchor" name="react.proptypes.oneof"></a><code>React.PropTypes.oneOf()</code> <a class="hash-link" href="#react.proptypes.oneof">#</a></h4>
<p>Validates that a prop is limited to specific values by treating it as an enum.</p>
<h4><a class="anchor" name="react.proptypes.oneoftype"></a><code>React.PropTypes.oneOfType()</code> <a class="hash-link" href="#react.proptypes.oneoftype">#</a></h4>
<p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.element
React.PropTypes.instanceOf()	A										<section class="prog__container"><p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p>
<h4><a class="anchor" name="react.proptypes.oneof"></a><code>React.PropTypes.oneOf()</code> <a class="hash-link" href="#react.proptypes.oneof">#</a></h4>
<p>Validates that a prop is limited to specific values by treating it as an enum.</p>
<h4><a class="anchor" name="react.proptypes.oneoftype"></a><code>React.PropTypes.oneOfType()</code> <a class="hash-link" href="#react.proptypes.oneoftype">#</a></h4>
<p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.instanceof
React.PropTypes.oneOf()	A										<section class="prog__container"><p>Validates that a prop is limited to specific values by treating it as an enum.</p>
<h4><a class="anchor" name="react.proptypes.oneoftype"></a><code>React.PropTypes.oneOfType()</code> <a class="hash-link" href="#react.proptypes.oneoftype">#</a></h4>
<p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.oneof
React.PropTypes.oneOfType()	A										<section class="prog__container"><p>Validates that a prop is an object that could be one of many types.</p>
<h4><a class="anchor" name="react.proptypes.arrayof"></a><code>React.PropTypes.arrayOf()</code> <a class="hash-link" href="#react.proptypes.arrayof">#</a></h4>
<p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.oneoftype
React.PropTypes.arrayOf()	A										<section class="prog__container"><p>Validates that a prop is an an array of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.objectof"></a><code>React.PropTypes.objectOf()</code> <a class="hash-link" href="#react.proptypes.objectof">#</a></h4>
<p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.arrayof
React.PropTypes.objectOf()	A										<section class="prog__container"><p>Validates that a prop is an object with property values of a certain type.</p>
<h4><a class="anchor" name="react.proptypes.shape"></a><code>React.PropTypes.shape()</code> <a class="hash-link" href="#react.proptypes.shape">#</a></h4>
<p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.objectof
React.PropTypes.shape()	A										<section class="prog__container"><p>Validates that a prop is an object taking on a particular shape.</p>
<h4><a class="anchor" name="react.proptypes.any"></a><code>React.PropTypes.any</code> <a class="hash-link" href="#react.proptypes.any">#</a></h4>
<p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.shape
React.PropTypes.any	A										<section class="prog__container"><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p>
<h3><a class="anchor" name="isrequired"></a><code>isRequired</code> <a class="hash-link" href="#isrequired">#</a></h3>
<p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.any
isRequired	A										<section class="prog__container"><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">MyComponent</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">requiredFunc</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#isrequired
React.addons	A										<section class="prog__container"><p><code>React.addons</code> exports a range of add-ons when using <a href="/react/docs/addons.html"><code>react-with-addons.js</code></a>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">React</span><span class="p">.</span><span class="nx">addons</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.addons
render()	A										<section class="prog__container"><p>The <code>render()</code> method is required.</p>
<p>When called, it should examine <code>this.props</code> and <code>this.state</code> and return a single React element. This element can be either a representation of a native DOM component, such as <code>&lt;div /&gt;</code>, or another composite component that you've defined yourself.</p>
<p>You can also return <code>null</code> or <code>false</code> to indicate that you don't want anything rendered. When returning <code>null</code> or <code>false</code>, <code>ReactDOM.findDOMNode(this)</code> will return <code>null</code>.</p>
<p>The <code>render()</code> function should be pure, meaning that it does not modify component state, it returns the same result each time it's invoked, and it does not directly interact with the browser. If you need to interact with the browser, perform your work in <code>componentDidMount()</code> or the other lifecycle methods instead. Keeping <code>render()</code> pure makes components easier to think about.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">render</span><span class="p">()</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#render
constructor()	A										<section class="prog__container"><p>The constructor for a React component is called before it is mounted. When implementing the constructor for a <code>React.Component</code> subclass, you should call <code>super(props)</code> before any other statement. Otherwise, <code>this.props</code> will be undefined in the constructor, which can lead to bugs.</p>
<p>The constructor is the right place to initialize state. If you don't initialize state and you don't bind methods, you don't need to implement a constructor for your React component.</p>
<p>It's okay to initialize state based on props if you know what you're doing. Here's an example of a valid <code>React.Component</code> subclass constructor:</p>

<p>Beware of this pattern, as it effectively "forks" the props and can lead to bugs. Instead of syncing props to state, you often want to <a href="/react/docs/lifting-state-up.html">lift the state up</a>.</p>
<p>If you "fork" props by using them for state, you might also want to implement <a href="#componentwillreceiveprops"><code>componentWillReceiveProps(nextProps)</code></a> to keep the state up-to-date with them. But lifting state up is often easier and less bug-prone.</p><br><pre><code class="language-js" data-lang="js"><span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">color</span><span class="o">:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">initialColor</span>
  <span class="p">};</span>
<span class="p">}</span>  
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#constructor
componentWillMount()	A										<section class="prog__container"><p><code>componentWillMount()</code> is invoked immediately before mounting occurs. It is called before <code>render()</code>, therefore setting state in this method will not trigger a re-rendering. Avoid introducing any side-effects or subscriptions in this method.</p>
<p>This is the only lifecycle hook called on server rendering. Generally, we recommend using the <code>constructor()</code> instead.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">componentWillMount</span><span class="p">()</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#componentwillmount
componentDidMount()	A										<section class="prog__container"><p><code>componentDidMount()</code> is invoked immediately after a component is mounted. Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request. Setting state in this method will trigger a re-rendering.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">componentDidMount</span><span class="p">()</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#componentdidmount
componentWillReceiveProps()	A										<section class="prog__container"><p><code>componentWillReceiveProps()</code> is invoked before a mounted component receives new props. If you need to update the state in response to prop changes (for example, to reset it), you may compare <code>this.props</code> and <code>nextProps</code> and perform state transitions using <code>this.setState()</code> in this method.</p>
<p>Note that React may call this method even if the props have not changed, so make sure to compare the current and next values if you only want to handle changes. This may occur when the parent component causes your component to re-render.</p>
<p><code>componentWillReceiveProps()</code> is not invoked if you just call <code>this.setState()</code></p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">componentWillReceiveProps</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#componentwillreceiveprops
shouldComponentUpdate()	A										<section class="prog__container"><p>Use <code>shouldComponentUpdate()</code> to let React know if a component's output is not affected by the current change in state or props. The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.</p>
<p><code>shouldComponentUpdate()</code> is invoked before rendering when new props or state are being received. Defaults to <code>true</code> This method is not called for the initial render or when <code>forceUpdate()</code> is used.</p>
<p>Returning <code>false</code> does not prevent child components from re-rendering when <em>their</em> state changes.</p>
<p>Currently, if <code>shouldComponentUpdate()</code> returns <code>false</code>, then <a href="#componentwillupdate"><code>componentWillUpdate()</code></a>, <a href="#render"><code>render()</code></a>, and <a href="#componentdidupdate"><code>componentDidUpdate()</code></a> will not be invoked. Note that in the future React may treat <code>shouldComponentUpdate()</code> as a hint rather than a strict directive, and returning <code>false</code> may still result in a re-rendering of the component.</p>
<p>If you determine a specific component is slow after profiling, you may change it to inherit from <a href="/react/docs/react-api.html#react.purecomponent"><code>React.PureComponent</code></a> which implements <code>shouldComponentUpdate()</code> with a shallow prop and state comparison. If you are confident you want to write it by hand, you may compare <code>this.props</code> with <code>nextProps</code> and <code>this.state</code> with <code>nextState</code> and return <code>false</code> to tell React the update can be skipped.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">shouldComponentUpdate</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">,</span> <span class="nx">nextState</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#shouldcomponentupdate
componentWillUpdate()	A										<section class="prog__container"><p><code>componentWillUpdate()</code> is invoked immediately before rendering when new props or state are being received. Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.</p>
<p>Note that you cannot call <code>this.setState()</code> here. If you need to update state in response to a prop change, use <code>componentWillReceiveProps()</code> instead.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">componentWillUpdate</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">,</span> <span class="nx">nextState</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#componentwillupdate
componentDidUpdate()	A										<section class="prog__container"><p><code>componentDidUpdate()</code> is invoked immediately after updating occurs. This method is not called for the initial render.</p>
<p>Use this as an opportunity to operate on the DOM when the component has been updated. This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">componentDidUpdate</span><span class="p">(</span><span class="nx">prevProps</span><span class="p">,</span> <span class="nx">prevState</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#componentdidupdate
componentWillUnmount()	A										<section class="prog__container"><p><code>componentWillUnmount()</code> is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any DOM elements that were created in <code>componentDidMount</code></p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">componentWillUnmount</span><span class="p">()</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#componentwillunmount
setState()	A										<section class="prog__container"><p>Performs a shallow merge of nextState into current state. This is the primary method you use to trigger UI updates from event handlers and server request callbacks.</p>
<p>The first argument can be an object (containing zero or more keys to update) or a function (of state and props) that returns an object containing keys to update.</p>
<p>Here is the simple object usage:</p>

<p>It's also possible to pass a function with the signature <code>function(state, props) =&gt; newState</code>. This enqueues an atomic update that consults the previous value of state and props before setting any values. For instance, suppose we wanted to increment a value in state by <code>props.step</code>:</p>

<p>The second parameter is an optional callback function that will be executed once <code>setState</code> is completed and the component is re-rendered. Generally we recommend using <code>componentDidUpdate()</code> for such logic instead.</p>
<p><code>setState()</code> does not immediately mutate <code>this.state</code> but creates a pending state transition. Accessing <code>this.state</code> after calling this method can potentially return the existing value.</p>
<p>There is no guarantee of synchronous operation of calls to <code>setState</code> and calls may be batched for performance gains.</p>
<p><code>setState()</code> will always lead to a re-render unless <code>shouldComponentUpdate()</code> returns <code>false</code>. If mutable objects are being used and conditional rendering logic cannot be implemented in <code>shouldComponentUpdate()</code>, calling <code>setState()</code> only when the new state differs from the previous state will avoid unnecessary re-renders.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">((</span><span class="nx">prevState</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span><span class="nx">myInteger</span><span class="o">:</span> <span class="nx">prevState</span><span class="p">.</span><span class="nx">myInteger</span> <span class="o">+</span> <span class="nx">props</span><span class="p">.</span><span class="nx">step</span><span class="p">};</span>
<span class="p">});</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#setstate
forceUpdate()	A										<section class="prog__container"><p>By default, when your component's state or props change, your component will re-render. If your <code>render()</code> method depends on some other data, you can tell React that the component needs re-rendering by calling <code>forceUpdate()</code>.</p>
<p>Calling <code>forceUpdate()</code> will cause <code>render()</code> to be called on the component, skipping <code>shouldComponentUpdate()</code>. This will trigger the normal lifecycle methods for child components, including the <code>shouldComponentUpdate()</code> method of each child. React will still only update the DOM if the markup changes.</p>
<p>Normally you should try to avoid all uses of <code>forceUpdate()</code> and only read from <code>this.props</code> and <code>this.state</code> in <code>render()</code>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">component</span><span class="p">.</span><span class="nx">forceUpdate</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#forceupdate
defaultProps	A										<section class="prog__container"><p><code>defaultProps</code> can be defined as a property on the component class itself, to set the default props for the class. This is used for undefined props, but not for null props. For example:</p>

<p>If <code>props.color</code> is not provided, it will be set by default to <code>'blue'</code>:</p>

<p>If <code>props.color</code> is set to null, it will remain null:</p><br><pre><code class="language-js" data-lang="js">  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">CustomButton</span> <span class="nx">color</span><span class="o">=</span><span class="p">{</span><span class="kc">null</span><span class="p">}</span> <span class="o">/&gt;</span> <span class="p">;</span> <span class="c1">// props.color will remain null</span>
  <span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#defaultprops
displayName	A										<section class="prog__container"><p><code>defaultProps</code> can be defined as a property on the component class itself, to set the default props for the class. This is used for undefined props, but not for null props. For example:</p>

<p>If <code>props.color</code> is not provided, it will be set by default to <code>'blue'</code>:</p>

<p>If <code>props.color</code> is set to null, it will remain null:</p><br><pre><code class="language-js" data-lang="js">  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">CustomButton</span> <span class="nx">color</span><span class="o">=</span><span class="p">{</span><span class="kc">null</span><span class="p">}</span> <span class="o">/&gt;</span> <span class="p">;</span> <span class="c1">// props.color will remain null</span>
  <span class="p">}</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#displayname
propTypes	A										<section class="prog__container"><p><code>propTypes</code> can be defined as a property on the component class itself, to define what types the props should be. It should be a map from prop names to types as defined in <a href="/react/docs/react-api.html#react.proptypes"><code>React.PropTypes</code></a>. In development mode, when an invalid value is provided for a prop, a warning will be shown in the JavaScript console. In production mode, <code>propTypes</code> checks are skipped for efficiency.</p>
<p>For example, this code ensures that the <code>color</code> prop is a string:</p>

<p>We recommend using <a href="https://flowtype.org/">Flow</a> when possible, to get compile-time typechecking instead of runtime typechecking. <a href="https://flowtype.org/docs/react.html">Flow has built-in support for React</a> so it's easy to run static analysis on a React app.</p><br><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">CustomButton</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nx">CustomButton</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span>
<span class="p">};</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#proptypes
props	A										<section class="prog__container"><p><code>propTypes</code> can be defined as a property on the component class itself, to define what types the props should be. It should be a map from prop names to types as defined in <a href="/react/docs/react-api.html#react.proptypes"><code>React.PropTypes</code></a>. In development mode, when an invalid value is provided for a prop, a warning will be shown in the JavaScript console. In production mode, <code>propTypes</code> checks are skipped for efficiency.</p>
<p>For example, this code ensures that the <code>color</code> prop is a string:</p>

<p>We recommend using <a href="https://flowtype.org/">Flow</a> when possible, to get compile-time typechecking instead of runtime typechecking. <a href="https://flowtype.org/docs/react.html">Flow has built-in support for React</a> so it's easy to run static analysis on a React app.</p><br><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">CustomButton</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nx">CustomButton</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span>
<span class="p">};</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#props
state	A										<section class="prog__container"><p><code>propTypes</code> can be defined as a property on the component class itself, to define what types the props should be. It should be a map from prop names to types as defined in <a href="/react/docs/react-api.html#react.proptypes"><code>React.PropTypes</code></a>. In development mode, when an invalid value is provided for a prop, a warning will be shown in the JavaScript console. In production mode, <code>propTypes</code> checks are skipped for efficiency.</p>
<p>For example, this code ensures that the <code>color</code> prop is a string:</p>

<p>We recommend using <a href="https://flowtype.org/">Flow</a> when possible, to get compile-time typechecking instead of runtime typechecking. <a href="https://flowtype.org/docs/react.html">Flow has built-in support for React</a> so it's easy to run static analysis on a React app.</p><br><pre><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">CustomButton</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nx">CustomButton</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span>
<span class="p">};</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#state
renderToString()	A										<section class="prog__container"><p>Render a React element to its initial HTML. This should only be used on the server. React will return an HTML string. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.</p>
<p>If you call <a href="/react/docs/react-dom.html#render"><code>ReactDOM.render()</code></a> on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">ReactDOMServer</span><span class="p">.</span><span class="nx">renderToString</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-dom-server.html#rendertostring
renderToStaticMarkup()	A										<section class="prog__container"><p>Similar to <a href="#rendertostring"><code>renderToString</code></a>, except this doesn't create extra DOM attributes such as <code>data-reactid</code>, that React uses internally. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save lots of bytes.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">ReactDOMServer</span><span class="p">.</span><span class="nx">renderToStaticMarkup</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-dom-server.html#rendertostaticmarkup
render()	A										<section class="prog__container"><p>Render a React element into the DOM in the supplied <code>container</code> and return a <a href="/react/docs/more-about-refs.html">reference</a> to the component (or returns <code>null</code> for <a href="/react/docs/components-and-props.html#functional-and-class-components">stateless components</a>.</p>
<p>If the React element was previously rendered into <code>container</code>, this will perform an update on it and only mutate the DOM as necessary to reflect the latest React element.</p>
<p>If the optional callback is provided, it will be executed after the component is rendered or updated.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="nx">element</span><span class="p">,</span>
  <span class="nx">container</span><span class="p">,</span>
  <span class="p">[</span><span class="nx">callback</span><span class="p">]</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-dom.html#render
unmountComponentAtNode()	A										<section class="prog__container"><p>Remove a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns <code>true</code> if a component was unmounted and <code>false</code> if there was no component to unmount.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">unmountComponentAtNode</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode
findDOMNode()	A										<section class="prog__container"><p>If this component has been mounted into the DOM, this returns the corresponding native browser DOM element. This method is useful for reading values out of the DOM, such as form field values and performing DOM measurements. <strong>In most cases, you can attach a ref to the DOM node and avoid using <code>findDOMNode</code> at all.</strong> When <code>render</code> returns <code>null</code> or <code>false</code>, <code>findDOMNode</code> returns <code>null</code>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">findDOMNode</span><span class="p">(</span><span class="nx">component</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/react-dom.html#finddomnode
Simulate	A										<section class="prog__container"><p>Simulate an event dispatch on a DOM node with optional <code>eventData</code> event data.</p>
<p><code>Simulate</code> has a method for <a href="/react/docs/events.html#supported-events">every event that React understands</a>.</p>
<p><strong>Clicking an element</strong></p>

<p><strong>Changing the value of an input field and then pressing ENTER.</strong></p><br><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// &lt;input ref="input" /&gt;</span>
<span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">input</span><span class="p">;</span>
<span class="nx">node</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">'giraffe'</span><span class="p">;</span>
<span class="nx">ReactTestUtils</span><span class="p">.</span><span class="nx">Simulate</span><span class="p">.</span><span class="nx">change</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
<span class="nx">ReactTestUtils</span><span class="p">.</span><span class="nx">Simulate</span><span class="p">.</span><span class="nx">keyDown</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="s2">"Enter"</span><span class="p">,</span> <span class="nx">keyCode</span><span class="o">:</span> <span class="mi">13</span><span class="p">,</span> <span class="nx">which</span><span class="o">:</span> <span class="mi">13</span><span class="p">});</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#simulate
renderIntoDocument()	A										<section class="prog__container"><p>Render a component into a detached DOM node in the document. <strong>This function requires a DOM.</strong></p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">renderIntoDocument</span><span class="p">(</span><span class="nx">instance</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#renderintodocument
mockComponent()	A										<section class="prog__container"><p>Pass a mocked component module to this method to augment it with useful methods that allow it to be used as a dummy React component. Instead of rendering as usual, the component will become a simple <code>&lt;div&gt;</code> (or other tag if <code>mockTagName</code> is provided) containing any provided children.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">mockComponent</span><span class="p">(</span>
  <span class="nx">componentClass</span><span class="p">,</span>
  <span class="p">[</span><span class="nx">mockTagName</span><span class="p">]</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#mockcomponent
isElement()	A										<section class="prog__container"><p>Returns <code>true</code> if <code>element</code> is any React element.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">isElement</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#iselement
isElementOfType()	A										<section class="prog__container"><p>Returns <code>true</code> if <code>element</code> is a React element whose type is of a React <code>componentClass</code>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">isElementOfType</span><span class="p">(</span>
  <span class="nx">element</span><span class="p">,</span>
  <span class="nx">componentClass</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#iselementoftype
isDOMComponent()	A										<section class="prog__container"><p>Returns <code>true</code> if <code>instance</code> is a DOM component (such as a <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code>).</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">isDOMComponent</span><span class="p">(</span><span class="nx">instance</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#isdomcomponent
isCompositeComponent()	A										<section class="prog__container"><p>Returns <code>true</code> if <code>instance</code> is a user-defined component, such as a class or a function.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">isCompositeComponent</span><span class="p">(</span><span class="nx">instance</span><span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#iscompositecomponent
isCompositeComponentWithType()	A										<section class="prog__container"><p>Returns <code>true</code> if <code>instance</code> is a component whose type is of a React <code>componentClass</code>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">isCompositeComponentWithType</span><span class="p">(</span>
  <span class="nx">instance</span><span class="p">,</span>
  <span class="nx">componentClass</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#iscompositecomponentwithtype
findAllInRenderedTree()	A										<section class="prog__container"><p>Traverse all components in <code>tree</code> and accumulate all components where <code>test(component)</code> is <code>true</code>. This is not that useful on its own, but it's used as a primitive for other test utils.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">findAllInRenderedTree</span><span class="p">(</span>
  <span class="nx">tree</span><span class="p">,</span>
  <span class="nx">test</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#findallinrenderedtree
scryRenderedDOMComponentsWithClass()	A										<section class="prog__container"><p>Finds all DOM elements of components in the rendered tree that are DOM components with the class name matching <code>className</code>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">scryRenderedDOMComponentsWithClass</span><span class="p">(</span>
  <span class="nx">tree</span><span class="p">,</span>
  <span class="nx">className</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#scryrendereddomcomponentswithclass
findRenderedDOMComponentWithClass()	A										<section class="prog__container"><p>Like <a href="#scryrendereddomcomponentswithclass"><code>scryRenderedDOMComponentsWithClass()</code></a> but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">findRenderedDOMComponentWithClass</span><span class="p">(</span>
  <span class="nx">tree</span><span class="p">,</span>
  <span class="nx">className</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#findrendereddomcomponentwithclass
scryRenderedDOMComponentsWithTag()	A										<section class="prog__container"><p>Finds all DOM elements of components in the rendered tree that are DOM components with the tag name matching <code>tagName</code>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">scryRenderedDOMComponentsWithTag</span><span class="p">(</span>
  <span class="nx">tree</span><span class="p">,</span>
  <span class="nx">tagName</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#scryrendereddomcomponentswithtag
findRenderedDOMComponentWithTag()	A										<section class="prog__container"><p>Like <a href="#scryrendereddomcomponentswithtag"><code>scryRenderedDOMComponentsWithTag()</code></a> but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">findRenderedDOMComponentWithTag</span><span class="p">(</span>
  <span class="nx">tree</span><span class="p">,</span>
  <span class="nx">tagName</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#findrendereddomcomponentwithtag
scryRenderedComponentsWithType()	A										<section class="prog__container"><p>Finds all instances of components with type equal to <code>componentClass</code>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">scryRenderedComponentsWithType</span><span class="p">(</span>
  <span class="nx">tree</span><span class="p">,</span>
  <span class="nx">componentClass</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#scryrenderedcomponentswithtype
findRenderedComponentWithType()	A										<section class="prog__container"><p>Same as <a href="#scryrenderedcomponentswithtype"><code>scryRenderedComponentsWithType()</code></a> but expects there to be one result and returns that one result, or throws exception if there is any other number of matches besides one.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">findRenderedComponentWithType</span><span class="p">(</span>
  <span class="nx">tree</span><span class="p">,</span>
  <span class="nx">componentClass</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#findrenderedcomponentwithtype
createRenderer()	A										<section class="prog__container"><p>Call this in your tests to create a <a href="#shallow-rendering">shallow renderer</a>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">createRenderer</span><span class="p">()</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#createrenderer
shallowRenderer.render()	A										<section class="prog__container"><p>Similar to <a href="/react/docs/react-dom.html#render"><code>ReactDOM.render</code></a> but it doesn't require DOM and only renders a single level deep. See <a href="#shallow-rendering">Shallow Rendering</a>.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">shallowRenderer</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="nx">element</span>
<span class="p">)</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#shallowrenderer.render
shallowRenderer.getRenderOutput()	A										<section class="prog__container"><p>After <a href="#shallowrenderer.render"><code>shallowRenderer.render()</code></a> has been called, returns shallowly rendered output.</p><br><pre><code class="language-javascript" data-lang="javascript"><span class="nx">shallowRenderer</span><span class="p">.</span><span class="nx">getRenderOutput</span><span class="p">()</span>
</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#shallowrenderer.getrenderoutput
